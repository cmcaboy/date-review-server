// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Person,
  Review,
  Comment,
  Photo,
  Platform
} from "../graphqlgen/testModel";
import { Context } from "./ResolverType";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsPerson {
    id?: string | null;
  }

  export interface ArgsReview {
    id?: string | null;
  }

  export interface ArgsComment {
    id?: string | null;
  }

  export interface ArgsFindUsers {
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
  }

  export interface ArgsFindReviews {
    userId?: string | null;
  }

  export interface ArgsFindComments {
    reviewId?: string | null;
  }

  export interface ArgsPlatform {
    id: string;
  }

  export interface ArgsFindPhoto {
    id: string;
  }

  export interface ArgsFindPhotos {
    userId?: string | null;
  }

  export type PersonResolver = (
    parent: undefined,
    args: ArgsPerson,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export type ReviewResolver = (
    parent: undefined,
    args: ArgsReview,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review | null | Promise<Review | null>;

  export type CommentResolver = (
    parent: undefined,
    args: ArgsComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type FindUsersResolver = (
    parent: undefined,
    args: ArgsFindUsers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Person | null> | null | Promise<Array<Person | null> | null>;

  export type FindReviewsResolver = (
    parent: undefined,
    args: ArgsFindReviews,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

  export type FindCommentsResolver = (
    parent: undefined,
    args: ArgsFindComments,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;

  export type FindAllPlatformsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Platform | null> | null | Promise<Array<Platform | null> | null>;

  export type PlatformResolver = (
    parent: undefined,
    args: ArgsPlatform,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Platform | null | Promise<Platform | null>;

  export type FindPhotoResolver = (
    parent: undefined,
    args: ArgsFindPhoto,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Photo | null | Promise<Photo | null>;

  export type FindPhotosResolver = (
    parent: undefined,
    args: ArgsFindPhotos,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;

  export type FindAllPhotosResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;

  export interface Type {
    person: (
      parent: undefined,
      args: ArgsPerson,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;

    review: (
      parent: undefined,
      args: ArgsReview,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review | null | Promise<Review | null>;

    comment: (
      parent: undefined,
      args: ArgsComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    findUsers: (
      parent: undefined,
      args: ArgsFindUsers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Person | null> | null | Promise<Array<Person | null> | null>;

    findReviews: (
      parent: undefined,
      args: ArgsFindReviews,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

    findComments: (
      parent: undefined,
      args: ArgsFindComments,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;

    findAllPlatforms: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Platform | null> | null | Promise<Array<Platform | null> | null>;

    platform: (
      parent: undefined,
      args: ArgsPlatform,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Platform | null | Promise<Platform | null>;

    findPhoto: (
      parent: undefined,
      args: ArgsFindPhoto,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Photo | null | Promise<Photo | null>;

    findPhotos: (
      parent: undefined,
      args: ArgsFindPhotos,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;

    findAllPhotos: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;
  }
}

export namespace PersonResolvers {
  export const defaultResolvers = {
    id: (parent: Person) => parent.id,
    username: (parent: Person) =>
      parent.username === undefined ? null : parent.username,
    firstName: (parent: Person) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: Person) =>
      parent.lastName === undefined ? null : parent.lastName,
    email: (parent: Person) =>
      parent.email === undefined ? null : parent.email,
    age: (parent: Person) => (parent.age === undefined ? null : parent.age),
    datetime: (parent: Person) =>
      parent.datetime === undefined ? null : parent.datetime
  };

  export type IdResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UsernameResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type FirstNameResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LastNameResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AgeResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DatetimeResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type ReviewsResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

  export type IsActiveResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type PhotosResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;

  export type PlatformResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Platform | null | Promise<Platform | null>;

  export type AuthoredReviewsResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

  export type CommentsResolver = (
    parent: Person,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;

  export interface Type {
    id: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    username: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    firstName: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lastName: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    age: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    datetime: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    reviews: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

    isActive: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    photos: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Photo | null> | null | Promise<Array<Photo | null> | null>;

    platform: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Platform | null | Promise<Platform | null>;

    authoredReviews: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Review | null> | null | Promise<Array<Review | null> | null>;

    comments: (
      parent: Person,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;
  }
}

export namespace ReviewResolvers {
  export const defaultResolvers = {
    id: (parent: Review) => parent.id,
    title: (parent: Review) =>
      parent.title === undefined ? null : parent.title,
    description: (parent: Review) =>
      parent.description === undefined ? null : parent.description,
    rating: (parent: Review) =>
      parent.rating === undefined ? null : parent.rating,
    datetime: (parent: Review) =>
      parent.datetime === undefined ? null : parent.datetime
  };

  export type IdResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TitleResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DescriptionResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RatingResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DatetimeResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type AuthorResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export type CommentsResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;

  export type PersonResolver = (
    parent: Review,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export interface Type {
    id: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    title: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    description: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    rating: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    datetime: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    author: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;

    comments: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Comment | null> | null | Promise<Array<Comment | null> | null>;

    person: (
      parent: Review,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;
  }
}

export namespace CommentResolvers {
  export const defaultResolvers = {
    id: (parent: Comment) => parent.id,
    text: (parent: Comment) => (parent.text === undefined ? null : parent.text)
  };

  export type IdResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AuthorResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export type TextResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DatetimeResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type ReviewResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review | null | Promise<Review | null>;

  export interface Type {
    id: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    author: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;

    text: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    datetime: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    review: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review | null | Promise<Review | null>;
  }
}

export namespace PhotoResolvers {
  export const defaultResolvers = {
    id: (parent: Photo) => parent.id,
    url: (parent: Photo) => (parent.url === undefined ? null : parent.url)
  };

  export type IdResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UrlResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PersonResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export interface Type {
    id: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    url: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    person: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;
  }
}

export namespace PlatformResolvers {
  export const defaultResolvers = {
    id: (parent: Platform) => parent.id,
    name: (parent: Platform) =>
      parent.name === undefined ? null : parent.name,
    description: (parent: Platform) =>
      parent.description === undefined ? null : parent.description
  };

  export type IdResolver = (
    parent: Platform,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Platform,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DescriptionResolver = (
    parent: Platform,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PersonsResolver = (
    parent: Platform,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Person | null> | null | Promise<Array<Person | null> | null>;

  export interface Type {
    id: (
      parent: Platform,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: Platform,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    description: (
      parent: Platform,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    persons: (
      parent: Platform,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Person | null> | null | Promise<Array<Person | null> | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsNewUser {
    username: string;
    firstName?: string | null;
    lastName?: string | null;
    age?: number | null;
    email?: string | null;
    instagramId?: string | null;
    platform?: string | null;
    photos?: Array<string | null> | null;
  }

  export interface ArgsNewReview {
    title: string;
    description?: string | null;
    rating?: number | null;
    personId?: string | null;
    authorId?: string | null;
  }

  export interface ArgsNewComment {
    text: string;
    authorId?: string | null;
    reviewId: string;
  }

  export interface ArgsNewPlatform {
    name: string;
    description?: string | null;
  }

  export interface ArgsEditUser {
    id: string;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    age?: number | null;
    email?: string | null;
    instagramId?: string | null;
    platform?: string | null;
    photos?: Array<string | null> | null;
  }

  export interface ArgsEditReview {
    id: string;
    title?: string | null;
    description?: string | null;
    rating?: number | null;
    userId?: number | null;
  }

  export interface ArgsEditComment {
    id: string;
    text: string;
  }

  export interface ArgsDeleteUser {
    id: string;
  }

  export interface ArgsDeleteReview {
    id: string;
  }

  export interface ArgsDeleteComment {
    id: string;
  }

  export interface ArgsDeletePhoto {
    id: string;
  }

  export type NewUserResolver = (
    parent: undefined,
    args: ArgsNewUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export type NewReviewResolver = (
    parent: undefined,
    args: ArgsNewReview,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review | null | Promise<Review | null>;

  export type NewCommentResolver = (
    parent: undefined,
    args: ArgsNewComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type NewPlatformResolver = (
    parent: undefined,
    args: ArgsNewPlatform,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Platform | null | Promise<Platform | null>;

  export type EditUserResolver = (
    parent: undefined,
    args: ArgsEditUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Person | null | Promise<Person | null>;

  export type EditReviewResolver = (
    parent: undefined,
    args: ArgsEditReview,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Review | null | Promise<Review | null>;

  export type EditCommentResolver = (
    parent: undefined,
    args: ArgsEditComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type DeleteUserResolver = (
    parent: undefined,
    args: ArgsDeleteUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type DeleteReviewResolver = (
    parent: undefined,
    args: ArgsDeleteReview,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type DeleteCommentResolver = (
    parent: undefined,
    args: ArgsDeleteComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type DeletePhotoResolver = (
    parent: undefined,
    args: ArgsDeletePhoto,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    newUser: (
      parent: undefined,
      args: ArgsNewUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;

    newReview: (
      parent: undefined,
      args: ArgsNewReview,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review | null | Promise<Review | null>;

    newComment: (
      parent: undefined,
      args: ArgsNewComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    newPlatform: (
      parent: undefined,
      args: ArgsNewPlatform,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Platform | null | Promise<Platform | null>;

    editUser: (
      parent: undefined,
      args: ArgsEditUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Person | null | Promise<Person | null>;

    editReview: (
      parent: undefined,
      args: ArgsEditReview,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Review | null | Promise<Review | null>;

    editComment: (
      parent: undefined,
      args: ArgsEditComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    deleteUser: (
      parent: undefined,
      args: ArgsDeleteUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    deleteReview: (
      parent: undefined,
      args: ArgsDeleteReview,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    deleteComment: (
      parent: undefined,
      args: ArgsDeleteComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    deletePhoto: (
      parent: undefined,
      args: ArgsDeletePhoto,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Person: PersonResolvers.Type;
  Review: ReviewResolvers.Type;
  Comment: CommentResolvers.Type;
  Photo: PhotoResolvers.Type;
  Platform: PlatformResolvers.Type;
  Mutation: MutationResolvers.Type;
}
